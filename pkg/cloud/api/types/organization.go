// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Organization A Containership organization
// swagger:model Organization
type Organization struct {

	// Timestamp at which the organization was created
	// Required: true
	CreatedAt *string `json:"created_at"`

	// Account ID
	// Required: true
	// Max Length: 36
	// Min Length: 36
	ID *string `json:"id"`

	// Flag indicating if the organization is locked
	//
	// If this flag is set to true, support must be contacted in order to re-enable access.
	// Required: true
	Locked *bool `json:"locked"`

	// Name of the organization (typically a company name)
	// Required: true
	Name *string `json:"name"`

	// User ID of the organization owner
	// Required: true
	// Max Length: 36
	// Min Length: 36
	OwnerID *string `json:"owner_id"`

	// Timestamp at which the organization was updated
	// Required: true
	UpdatedAt *string `json:"updated_at"`
}

// Validate validates this organization
func (m *Organization) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocked(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Organization) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *Organization) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", string(*m.ID), 36); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", string(*m.ID), 36); err != nil {
		return err
	}

	return nil
}

func (m *Organization) validateLocked(formats strfmt.Registry) error {

	if err := validate.Required("locked", "body", m.Locked); err != nil {
		return err
	}

	return nil
}

func (m *Organization) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Organization) validateOwnerID(formats strfmt.Registry) error {

	if err := validate.Required("owner_id", "body", m.OwnerID); err != nil {
		return err
	}

	if err := validate.MinLength("owner_id", "body", string(*m.OwnerID), 36); err != nil {
		return err
	}

	if err := validate.MaxLength("owner_id", "body", string(*m.OwnerID), 36); err != nil {
		return err
	}

	return nil
}

func (m *Organization) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Organization) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Organization) UnmarshalBinary(b []byte) error {
	var res Organization
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
